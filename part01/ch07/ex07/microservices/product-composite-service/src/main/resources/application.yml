springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs
  packagesToScan: productcompositeservice #
  pathsToMatch: /**

api:

  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfService: MY TERMS OF SERVICE
    license: MY LICENSE
    licenseUrl: MY LICENSE URL

    externalDocDesc: MY WIKI PAGE
    externalDocUrl: MY WIKI URL
    contact:
      name: NAME OF CONTACT
      url: URL TO CONTACT
      email: contact@mail.com

  responseCodes:
    ok.description: OK
    badRequest.description: Bad Request, invalid format of the request. See response message for more information
    notFound.description: Not found, the specified id does not exist
    unprocessableEntity.description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information

  product-composite:

    get-composite-product:
      description: Returns a composite view of the specified product id
      notes: |
        # Normal response
        If the requested product id is found the method will return information regarding:
        1. Product information
        1. Reviews
        1. Recommendations
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        1. If no product information is found, a **404 - Not Found** error will be returned
        1. In no recommendations or reviews are found for a product, a partial response will be returned

    create-composite-product:
      description: Creates a composite product
      notes: |
        # Normal response
        The composite product information posted to the API will be split up and stored as separate product-info, recommendation and review entities.

        # Expected error responses
        1. If a product with the same productId as specified in the posted information already exists,
           an **422 - Unprocessable Entity** error with a "duplicate key" error message will be returned

    delete-composite-product:
      description: Deletes a product composite
      notes: |
        # Normal response
        Entities for product information, recommendations and reviews related to the specified productId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.

        This means that a delete request of a non-existing product will return **200 Ok**.

# 1. 복합 마이크로 서비스 포트 설정
server.port: 7000
server.error.include-message: always

# 유레카 서버에 연결할 클라이언트 구성
spring.application.name: product-composite
app.eureka-server: localhost

eureka:
  client:
    serviceUrl:
      defaultZone: http://${app.eureka-server}:8761/eureka/ # 유레카 서버 주소
    initialInstanceInfoReplicationIntervalSeconds: 5 # 시작시간 최소화를 위한 옵션들
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5


# 복합 마이크로서비스 스프링 클라우드 설정
spring.cloud.stream:
  defaultBinder: rabbit # 바인더로 래빗 메시징 시스템과 통합한다.
  default.contentType: application/json
  bindings:
    products-out-0: # 메시지 생산자를 바인딩한다.
      destination: products # 데스티네이션은 products 채널과 토픽을 연결시켜주는 역할을 한다.
      producer:
        required-groups: auditGroup # 래빗에서 각 토픽에 게시된 이벤트를 확인할 수 있도록 별도의 대기열을 생성한다.(래빗은 이벤트 처리를 성공하면 이벤트를 제거함)
    recommendations-out-0:
      destination: recommendations
      producer:
        required-groups: auditGroup
    reviews-out-0:
      destination: reviews
      producer:
        required-groups: auditGroup

# 바인더 세부 설정 (외부 메시지 시스템의 메타 정보 주입)
spring.cloud.stream.kafka.binder:
  brokers: 127.0.0.1
  defaultBrokerPort: 9092

spring.rabbitmq:
  host: 127.0.0.1
  port: 5672
  username: guest
  password: guest

logging:
  level:
    root: INFO
    se.magnus: DEBUG
    productcompositeservice.services: DEBUG

# 액추에이터 헬스 구성 설정
management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"

---
#도커 구성 설정하기
spring.config.activate.on-profile: docker

server.port: 8080

spring.rabbitmq.host: rabbitmq
spring.cloud.stream.kafka.binder.brokers: kafka
app.eureka-server: eureka  # 위의 유레카 구성 설정을 받아서 사용하는듯?

---
# 파티션 설정하기 헤더 값 설정은 ProductCompositeIntegration 를 참고한다.

spring.config.activate.on-profile: streaming_partitioned

spring.cloud.stream.bindings.products-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

spring.cloud.stream.bindings.recommendations-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

spring.cloud.stream.bindings.reviews-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2
---

# 카프카 설정
spring.config.activate.on-profile: kafka

management.health.rabbit.enabled: false
spring.cloud.stream.defaultBinder: kafka
spring.kafka.bootstrap-servers: kafka:9092
spring.cloud.stream.kafka.binder.replication-factor: 1



#app:
#  product-service:
#    host: localhost
#    port: 7001
#  recommendation-service:
#    host: localhost
#    port: 7002
#  review-service:
#    host: localhost
#    port: 7003